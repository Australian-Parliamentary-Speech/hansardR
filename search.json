[{"path":[]},{"path":"https://australian-parliamentary-speech.github.io/hansardR/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement kbenoit@smu.edu.sg. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to hansardR","title":"Contributing to hansardR","text":"outlines propose change hansardR. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to hansardR","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to hansardR","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to hansardR","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"Australian-Parliamentary-Speech/hansardR\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to hansardR","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to hansardR","text":"Please note hansardR project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"processing-australian-parliamentary-hansard-data","dir":"Articles","previous_headings":"","what":"Processing Australian Parliamentary Hansard Data","title":"Complete Hansard Data Processing Workflow","text":"hansardR package provides comprehensive toolkit processing, validating, analysing Australian Parliamentary Hansard CSV data. vignette demonstrates complete workflow raw CSV files structured database ready computational social science research.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"overview","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data","what":"Overview","title":"Complete Hansard Data Processing Workflow","text":"package handles parliamentary data following structure: - Sessions: Parliamentary sitting days - Members: MPs party affiliations electorates - Debates: Major topics discussed session - Speeches: Individual contributions, questions, answers, interjections","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"setup","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data","what":"Setup","title":"Complete Hansard Data Processing Workflow","text":"","code":"library(hansardR) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(DBI)  # Use sample data included with the package sample_data_path <- system.file(\"extdata\", \"houseCSV\", package = \"hansardR\") db_path <- tempfile(fileext = \".db\")  # Use temporary database for vignette  cat(\"Sample data location:\", sample_data_path, \"\\n\") #> Sample data location: /home/runner/work/_temp/Library/hansardR/extdata/houseCSV cat(\"Temporary database:\", db_path, \"\\n\") #> Temporary database: /tmp/RtmpWnK5tj/file1e731f98e824.db  # Show available sample data structure if (dir.exists(sample_data_path)) {   cat(\"\\nAvailable sample years:\\n\")   year_dirs <- list.dirs(sample_data_path, recursive = FALSE, full.names = FALSE)   for (year in year_dirs) {     year_path <- file.path(sample_data_path, year)     files <- list.files(year_path, pattern = \"*.csv\")     cat(\" \", year, \": \", length(files), \" files\\n\")     for (file in files) {       cat(\"   -\", file, \"\\n\")     }   } } #>  #> Available sample years: #>   2024 :  3  files #>    - 2024-02-08_edit_step7.csv  #>    - 2024-05-14_edit_step7.csv  #>    - 2024-11-21_edit_step7.csv  #>   2025 :  2  files #>    - 2025-02-06_edit_step7.csv  #>    - 2025-03-25_edit_step7.csv"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"step-1-database-creation","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data","what":"Step 1: Database Creation","title":"Complete Hansard Data Processing Workflow","text":"Create new SQLite database standard Hansard schema: database includes optimised indexes : - Temporal queries (date, year) - Member-based analysis (party, electorate) - Content analysis (full-text search ready) - Debate structure (hierarchical organisation)","code":"# Create database with standard schema con <- create_hansard_database(db_path, overwrite = TRUE) #> Standard schema created #> Database created successfully at: /tmp/RtmpWnK5tj/file1e731f98e824.db  # Or connect to existing database # con <- connect_hansard_database(db_path)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"step-2-file-discovery-and-validation","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data","what":"Step 2: File Discovery and Validation","title":"Complete Hansard Data Processing Workflow","text":"processing, validate CSV files ensure data integrity:","code":"# Find sample CSV files included with the package sample_years <- list.dirs(sample_data_path, recursive = FALSE, full.names = TRUE) sample_years <- sample_years[grepl(\"\\\\d{4}$\", basename(sample_years))]  # Only year directories  # Get all sample files sample_files <- c() for (year_dir in sample_years) {   files <- list.files(year_dir, pattern = \"*_edit_step7.csv\", full.names = TRUE)   sample_files <- c(sample_files, files) }  cat(\"Found\", length(sample_files), \"sample files across\", length(sample_years), \"years:\\n\") #> Found 5 sample files across 2 years: cat(\"Years available:\", paste(basename(sample_years), collapse = \", \"), \"\\n\") #> Years available: 2024, 2025  # Show file details for (file in sample_files) {   year <- basename(dirname(file))   filename <- basename(file)   size_kb <- round(file.size(file) / 1024, 1)   cat(\" \", year, \"/\", filename, \" (\", size_kb, \" KB)\\n\", sep = \"\") } #>  2024/2024-02-08_edit_step7.csv (316.4 KB) #>  2024/2024-05-14_edit_step7.csv (380.6 KB) #>  2024/2024-11-21_edit_step7.csv (469.9 KB) #>  2025/2025-02-06_edit_step7.csv (535.8 KB) #>  2025/2025-03-25_edit_step7.csv (348.2 KB)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"file-structure-validation","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data > Step 2: File Discovery and Validation","what":"File Structure Validation","title":"Complete Hansard Data Processing Workflow","text":"","code":"# Validate file structures validation_results <- validate_csv_batch(sample_files)  # View validation summary print(validation_results) #> # A tibble: 5 × 9 #>   file_path    filename valid session_date row_count n_missing_cols n_extra_cols #>   <chr>        <chr>    <lgl> <date>           <int>          <int>        <int> #> 1 /home/runne… 2024-02… TRUE  2024-02-08           5              0            0 #> 2 /home/runne… 2024-05… TRUE  2024-05-14           5              0            0 #> 3 /home/runne… 2024-11… TRUE  2024-11-21           5              0            0 #> 4 /home/runne… 2025-02… TRUE  2025-02-06           5              0            0 #> 5 /home/runne… 2025-03… TRUE  2025-03-25           5              0            0 #> # ℹ 2 more variables: issues <chr>, error <chr>  # Check for issues problems <- validation_results[!validation_results$valid, ] if (nrow(problems) > 0) {   cat(\"Files with issues:\\n\")   print(problems[c(\"filename\", \"issues\", \"error\")]) }  # Files ready for import valid_files <- validation_results$file_path[validation_results$valid] cat(\"\\nValid files ready for import:\", length(valid_files), \"\\n\") #>  #> Valid files ready for import: 5"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"step-3-single-file-import","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data","what":"Step 3: Single File Import","title":"Complete Hansard Data Processing Workflow","text":"Start importing single file test workflow:","code":"# Import one file for testing if (length(valid_files) > 0) {   test_file <- valid_files[1]   cat(\"Testing import with:\", basename(test_file), \"\\n\")      success <- import_hansard_file(test_file, con, validate = TRUE)      if (success) {     cat(\"✓ Test import successful!\\n\")          # Check what was imported     stats <- get_database_stats(con)     cat(\"Database now contains:\\n\")     cat(\"  Sessions:\", stats$sessions, \"\\n\")     cat(\"  Members:\", stats$members, \"\\n\")     cat(\"  Speeches:\", stats$speeches, \"\\n\")   } } #> Testing import with: 2024-02-08_edit_step7.csv #> Processing: 2024-02-08_edit_step7.csv #>   v Successfully imported 243 records #> ✓ Test import successful! #> Database now contains: #>   Sessions: 1  #>   Members: 44  #>   Speeches: 243"},{"path":[]},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"process-a-single-year","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data > Step 4: Batch Processing","what":"Process a Single Year","title":"Complete Hansard Data Processing Workflow","text":"","code":"# Process sample years sample_year_dirs <- list.dirs(sample_data_path, recursive = FALSE, full.names = TRUE) sample_year_dirs <- sample_year_dirs[grepl(\"\\\\d{4}$\", basename(sample_year_dirs))]  for (year_dir in sample_year_dirs) {   year_name <- basename(year_dir)   cat(\"\\n=== Processing\", year_name, \"===\\n\")      # Show what files we're about to process   csv_files <- list.files(year_dir, pattern = \"*_edit_step7.csv\", full.names = TRUE)   cat(\"Files to process:\\n\")   for (file in csv_files) {     cat(\"  -\", basename(file), \"\\n\")   }      year_results <- import_hansard_year(     year_dir,      con,      pattern = \"*_edit_step7.csv\",     validate = TRUE,     progress = FALSE  # Disable progress bar in vignette   )      # Show results   if (nrow(year_results) > 0) {     successful <- sum(year_results$success)     total <- nrow(year_results)     cat(\"Result: Imported\", successful, \"out of\", total, \"files successfully\\n\")          if (successful < total) {       failed_files <- year_results$filename[!year_results$success]       cat(\"Failed files:\", paste(failed_files, collapse = \", \"), \"\\n\")     }   } } #>  #> === Processing 2024 === #> Files to process: #>   - 2024-02-08_edit_step7.csv  #>   - 2024-05-14_edit_step7.csv  #>   - 2024-11-21_edit_step7.csv #> Processing 2024 (3 files) #> Processing: 2024-02-08_edit_step7.csv #>   ! Session already exists (use force_reimport = TRUE to overwrite) #> Processing: 2024-05-14_edit_step7.csv #>   v Successfully imported 191 records #> Processing: 2024-11-21_edit_step7.csv #>   v Successfully imported 166 records #>  #> === Import Summary === #> Successful: 2/3 (66.7%) #> Failed files: 2024-02-08_edit_step7.csv #> Result: Imported 2 out of 3 files successfully #> Failed files: 2024-02-08_edit_step7.csv  #>  #> === Processing 2025 === #> Files to process: #>   - 2025-02-06_edit_step7.csv  #>   - 2025-03-25_edit_step7.csv #> Processing 2025 (2 files) #> Processing: 2025-02-06_edit_step7.csv #>   v Successfully imported 182 records #> Processing: 2025-03-25_edit_step7.csv #>   v Successfully imported 189 records #>  #> === Import Summary === #> Successful: 2/2 (100%) #> Result: Imported 2 out of 2 files successfully"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"process-multiple-years","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data > Step 4: Batch Processing","what":"Process Multiple Years","title":"Complete Hansard Data Processing Workflow","text":"","code":"# Process both available years in the sample data available_years <- basename(list.dirs(sample_data_path, recursive = FALSE, full.names = FALSE)) available_years <- available_years[grepl(\"^\\\\d{4}$\", available_years)]  cat(\"Processing all available sample years:\", paste(available_years, collapse = \", \"), \"\\n\") #> Processing all available sample years: 2024, 2025  all_results <- list()  for (year in available_years) {   year_path <- file.path(sample_data_path, year)      if (dir.exists(year_path)) {     cat(\"\\n=== Processing\", year, \"===\\n\")          # Show what we're processing     csv_files <- list.files(year_path, pattern = \"*_edit_step7.csv\")     cat(\"Found\", length(csv_files), \"CSV files in\", year, \"\\n\")          year_results <- import_hansard_year(       year_path,        con,       validate = TRUE,       force_reimport = FALSE,  # Skip existing sessions       progress = FALSE     )          all_results[[year]] <- year_results          # Show summary     if (nrow(year_results) > 0) {       successful <- sum(year_results$success)       total <- nrow(year_results)       cat(\"Summary:\", successful, \"/\", total, \"files imported successfully\\n\")     }   } else {     cat(\"Directory not found:\", year_path, \"\\n\")   } } #>  #> === Processing 2024 === #> Found 3 CSV files in 2024 #> Processing 2024 (3 files) #> Processing: 2024-02-08_edit_step7.csv #>   ! Session already exists (use force_reimport = TRUE to overwrite) #> Processing: 2024-05-14_edit_step7.csv #>   ! Session already exists (use force_reimport = TRUE to overwrite) #> Processing: 2024-11-21_edit_step7.csv #>   ! Session already exists (use force_reimport = TRUE to overwrite) #>  #> === Import Summary === #> Successful: 0/3 (0%) #> Failed files: 2024-02-08_edit_step7.csv, 2024-05-14_edit_step7.csv, 2024-11-21_edit_step7.csv #> Summary: 0 / 3 files imported successfully #>  #> === Processing 2025 === #> Found 2 CSV files in 2025 #> Processing 2025 (2 files) #> Processing: 2025-02-06_edit_step7.csv #>   ! Session already exists (use force_reimport = TRUE to overwrite) #> Processing: 2025-03-25_edit_step7.csv #>   ! Session already exists (use force_reimport = TRUE to overwrite) #>  #> === Import Summary === #> Successful: 0/2 (0%) #> Failed files: 2025-02-06_edit_step7.csv, 2025-03-25_edit_step7.csv #> Summary: 0 / 2 files imported successfully  # Combine results if (length(all_results) > 0) {   combined_results <- do.call(rbind, all_results)   cat(\"\\n=== Overall Import Summary ===\\n\")   total_files <- nrow(combined_results)   total_successful <- sum(combined_results$success)   cat(\"Total files processed:\", total_files, \"\\n\")   cat(\"Successfully imported:\", total_successful, \"\\n\")   cat(\"Success rate:\", round(100 * total_successful / total_files, 1), \"%\\n\") } #>  #> === Overall Import Summary === #> Total files processed: 5  #> Successfully imported: 0  #> Success rate: 0 %"},{"path":[]},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"database-statistics","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data > Step 5: Data Exploration","what":"Database Statistics","title":"Complete Hansard Data Processing Workflow","text":"","code":"# Get comprehensive database statistics stats <- get_database_stats(con)  cat(\"=== Database Statistics ===\\n\") #> === Database Statistics === cat(\"Sessions:\", stats$sessions, \"\\n\") #> Sessions: 5 cat(\"Members:\", stats$members, \"\\n\") #> Members: 96 cat(\"Debates:\", stats$debates, \"\\n\") #> Debates: 66 cat(\"Speeches:\", stats$speeches, \"\\n\") #> Speeches: 971 cat(\"Date range:\", as.character(stats$date_range[1]), \"to\", as.character(stats$date_range[2]), \"\\n\") #> Date range: 19761 to 20172 cat(\"Average speech length:\", round(stats$avg_length, 1), \"characters\\n\") #> Average speech length: 2688.2 characters  cat(\"\\nSpeech types:\\n\") #>  #> Speech types: cat(\"  Questions:\", stats$questions, \"\\n\") #>   Questions: NA cat(\"  Answers:\", stats$answers, \"\\n\") #>   Answers: NA cat(\"  Speeches:\", stats$speeches, \"\\n\") #>   Speeches: 971 cat(\"  Interjections:\", stats$interjections, \"\\n\") #>   Interjections: NA"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"top-speakers-analysis","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data > Step 5: Data Exploration","what":"Top Speakers Analysis","title":"Complete Hansard Data Processing Workflow","text":"","code":"# Get most active speakers top_speakers <- get_top_speakers(con, limit = 15) print(top_speakers) #> # A tibble: 15 × 8 #>    full_name       party electorate total_speeches total_words avg_speech_length #>    <chr>           <chr> <chr>               <int>       <int>             <dbl> #>  1 NA              NA    NA                    452     1126765             2509. #>  2 Dick, Milton MP ALP   Oxley                 172       87631             6259. #>  3 Albanese, Anth… ALP   Grayndler              32       45079             1610. #>  4 DEPUTY SPEAKER… NA    NA                     21       80747            10093. #>  5 Chalmers, Jim … ALP   Rankin                 18       33477             2092. #>  6 Sukkar, Michae… LP    Deakin                 16          NA               NA  #>  7 Dutton, Peter … LNP   Dickson                15        1893              473. #>  8 Burke, Tony MP  ALP   Watson                 14       12470             2078. #>  9 Claydon, Sharo… ALP   Newcastle              14         207              207  #> 10 Taylor, Angus … LP    Hume                   14        2469              247. #> 11 Plibersek, Tan… ALP   Sydney                  8       11193             1599  #> 12 Marles, Richar… ALP   Corio                   7       12228             2038  #> 13 Chesters, Lisa… ALP   Bendigo                 6         576              192  #> 14 Butler, Mark C… ALP   Hindmarsh               5       10475             2095  #> 15 Clare, Jason D… ALP   Blaxland                5       11696             2339. #> # ℹ 2 more variables: questions_asked <lgl>, answers_given <lgl>  # Party breakdown party_activity <- top_speakers |>   group_by(party) |>   summarise(     members = n(),     total_speeches = sum(total_speeches),     avg_speeches_per_member = round(mean(total_speeches), 1),     .groups = \"drop\"   ) |>   arrange(desc(total_speeches))  print(party_activity) #> # A tibble: 4 × 4 #>   party members total_speeches avg_speeches_per_member #>   <chr>   <int>          <int>                   <dbl> #> 1 NA          2            473                     473 #> 2 ALP        10            281                     281 #> 3 LP          2             30                      30 #> 4 LNP         1             15                      15"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"step-6-advanced-queries-with-dplyr","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data","what":"Step 6: Advanced Queries with dplyr","title":"Complete Hansard Data Processing Workflow","text":"Get table references direct dplyr querying:","code":"# Get table references tbls <- get_hansard_tables(con)  # Show table structure cat(\"Available tables:\\n\") #> Available tables: for (name in names(tbls)) {   cat(\" \", name, \"\\n\") } #>   sessions  #>   members  #>   debates  #>   speeches"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"temporal-analysis","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data > Step 6: Advanced Queries with dplyr","what":"Temporal Analysis","title":"Complete Hansard Data Processing Workflow","text":"","code":"# Questions over time by party (using our sample data) questions_by_party_year <- tbls$speeches |>   filter(is_question == 1) |>   left_join(tbls$members, by = \"member_id\") |>   left_join(tbls$sessions, by = \"session_id\") |>   count(party, year, sort = TRUE) |>   collect()  if (nrow(questions_by_party_year) > 0) {   cat(\"Questions by party and year in sample data:\\n\")   print(questions_by_party_year) } else {   cat(\"No questions found in sample data\\n\") } #> No questions found in sample data  # Session-level activity (all speech types) session_activity <- tbls$speeches |>   left_join(tbls$sessions, by = \"session_id\") |>   group_by(session_date, year) |>   summarise(     total_speeches = n(),     questions = sum(is_question, na.rm = TRUE),     answers = sum(is_answer, na.rm = TRUE),     interjections = sum(is_interjection, na.rm = TRUE),     .groups = \"drop\"   ) |>   arrange(session_date) |>   collect()  cat(\"\\nSession-level activity:\\n\") #>  #> Session-level activity: print(session_activity) #> # A tibble: 5 × 6 #>   session_date  year total_speeches questions answers interjections #>          <int> <int>          <int> <lgl>     <lgl>   <lgl>         #> 1        19761 -4658            243 NA        NA      NA            #> 2        19857 -4658            191 NA        NA      NA            #> 3        20048 -4658            166 NA        NA      NA            #> 4        20125 -4658            182 NA        NA      NA            #> 5        20172 -4657            189 NA        NA      NA"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"content-analysis","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data > Step 6: Advanced Queries with dplyr","what":"Content Analysis","title":"Complete Hansard Data Processing Workflow","text":"","code":"# Average speech length by party (using sample data) speech_length_by_party <- tbls$speeches |>   left_join(tbls$members, by = \"member_id\") |>   filter(!is.na(party)) |>  # Only include rows with party information   group_by(party) |>   summarise(     speech_count = n(),     avg_length = round(mean(content_length, na.rm = TRUE), 1),     median_length = round(median(content_length, na.rm = TRUE), 1),     total_words = sum(content_length, na.rm = TRUE),     .groups = \"drop\"   ) |>   filter(speech_count >= 1) |>  # Include all parties in sample data   arrange(desc(avg_length)) |>   collect()  cat(\"Speech length statistics by party:\\n\") #> Speech length statistics by party: print(speech_length_by_party) #> # A tibble: 8 × 5 #>   party speech_count avg_length median_length total_words #>   <chr>        <int>      <dbl>         <dbl>       <int> #> 1 NATS             9     37116.        37116.       74231 #> 2 AG              12     10751.         5355        64508 #> 3 IND             15      7685.          563        99908 #> 4 ALP            369      2218.         1167       379359 #> 5 KAP              2       880           880          880 #> 6 LP              58       726.          332        18868 #> 7 LNP             31       351.          326         4217 #> 8 CA               2        NA            NA           NA  # Most active debates in sample data popular_debates <- tbls$speeches |>   left_join(tbls$debates, by = \"debate_id\") |>   filter(!is.na(debate_title)) |>   count(debate_title, sort = TRUE) |>   collect()  cat(\"\\nMost discussed topics in sample data:\\n\") #>  #> Most discussed topics in sample data: print(popular_debates) #> # A tibble: 25 × 2 #>    debate_title                     n #>    <chr>                        <int> #>  1 QUESTIONS WITHOUT NOTICE       528 #>  2 BILLS                          122 #>  3 STATEMENTS BY MEMBERS          106 #>  4 MATTERS OF PUBLIC IMPORTANCE    43 #>  5 ADJOURNMENT                     37 #>  6 CONSTITUENCY STATEMENTS         21 #>  7 CONDOLENCES                     21 #>  8 MOTIONS                         13 #>  9 COMMITTEES                      12 #> 10 BUSINESS                        12 #> # ℹ 15 more rows  # Speech type distribution speech_types <- tbls$speeches |>   summarise(     total_records = n(),     questions = sum(is_question, na.rm = TRUE),     answers = sum(is_answer, na.rm = TRUE),     speeches = sum(is_speech, na.rm = TRUE),     interjections = sum(is_interjection, na.rm = TRUE),     stage_directions = sum(is_stage_direction, na.rm = TRUE)   ) |>   collect()  cat(\"\\nSpeech type distribution in sample data:\\n\") #>  #> Speech type distribution in sample data: print(speech_types) #> # A tibble: 1 × 6 #>   total_records questions answers speeches interjections stage_directions #>           <int> <lgl>     <lgl>   <lgl>    <lgl>         <lgl>            #> 1           971 NA        NA      NA       NA            NA"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"member-specific-analysis","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data > Step 6: Advanced Queries with dplyr","what":"Member-Specific Analysis","title":"Complete Hansard Data Processing Workflow","text":"","code":"# Most active members in sample data sample_speakers <- tbls$speeches |>   left_join(tbls$members, by = \"member_id\") |>   left_join(tbls$sessions, by = \"session_id\") |>   filter(!is.na(full_name)) |>  # Only include identified speakers   group_by(full_name, party, electorate) |>   summarise(     sessions_active = n_distinct(session_id),     total_contributions = n(),     questions = sum(is_question, na.rm = TRUE),     answers = sum(is_answer, na.rm = TRUE),     speeches = sum(is_speech, na.rm = TRUE),     avg_speech_length = round(mean(content_length, na.rm = TRUE), 1),     .groups = \"drop\"   ) |>   arrange(desc(total_contributions)) |>   collect()  cat(\"Member activity in sample data:\\n\") #> Member activity in sample data: print(sample_speakers) #> # A tibble: 96 × 9 #>    full_name      party electorate sessions_active total_contributions questions #>    <chr>          <chr> <chr>                <int>               <int> <lgl>     #>  1 Dick, Milton … ALP   Oxley                    5                 172 NA        #>  2 Albanese, Ant… ALP   Grayndler                4                  32 NA        #>  3 DEPUTY SPEAKE… NA    NA                       3                  21 NA        #>  4 Chalmers, Jim… ALP   Rankin                   3                  18 NA        #>  5 Sukkar, Micha… LP    Deakin                   4                  16 NA        #>  6 Dutton, Peter… LNP   Dickson                  4                  15 NA        #>  7 Burke, Tony MP ALP   Watson                   5                  14 NA        #>  8 Claydon, Shar… ALP   Newcastle                5                  14 NA        #>  9 Taylor, Angus… LP    Hume                     3                  14 NA        #> 10 Plibersek, Ta… ALP   Sydney                   3                   8 NA        #> # ℹ 86 more rows #> # ℹ 3 more variables: answers <lgl>, speeches <lgl>, avg_speech_length <dbl>  # Party representation in sample party_summary <- tbls$members |>   filter(!is.na(party)) |>   count(party, sort = TRUE) |>   collect()  cat(\"\\nParty representation in sample data:\\n\") #>  #> Party representation in sample data: print(party_summary) #> # A tibble: 8 × 2 #>   party     n #>   <chr> <int> #> 1 ALP      54 #> 2 LP       13 #> 3 IND       9 #> 4 LNP       9 #> 5 NATS      5 #> 6 AG        3 #> 7 CA        1 #> 8 KAP       1"},{"path":[]},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"simple-content-search","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data > Step 7: Text Search and Analysis","what":"Simple Content Search","title":"Complete Hansard Data Processing Workflow","text":"","code":"# Search for specific topics using database-friendly approach # Note: grepl() doesn't work with databases, so we use direct SQL climate_mentions <- DBI::dbGetQuery(con, \"   SELECT      m.full_name,     m.party,      s.session_date,     sp.content_length,     SUBSTR(sp.content, 1, 100) || '...' as content_preview   FROM speeches sp   LEFT JOIN members m ON sp.member_id = m.member_id     LEFT JOIN sessions s ON sp.session_id = s.session_id   WHERE LOWER(sp.content) LIKE '%climate%'   ORDER BY s.session_date DESC   LIMIT 10 \")  if (nrow(climate_mentions) > 0) {   cat(\"Recent 'climate' mentions:\\n\")   print(climate_mentions) } else {   cat(\"No 'climate' mentions found in current dataset\\n\")      # Try a broader search   any_mentions <- DBI::dbGetQuery(con, \"     SELECT COUNT(*) as total_speeches     FROM speeches      WHERE content IS NOT NULL AND LENGTH(content) > 10   \")   cat(\"Total speeches with content:\", any_mentions$total_speeches, \"\\n\") } #> Recent 'climate' mentions: #>                   full_name party session_date content_length #> 1                      <NA>  <NA>        20172           1625 #> 2                      <NA>  <NA>        20172           6516 #> 3                      <NA>  <NA>        20172          12979 #> 4                      <NA>  <NA>        20172           1482 #> 5       Bandt, Adam Paul MP    AG        20172            523 #> 6      Albanese, Anthony MP   ALP        20172           2308 #> 7           Sitou, Sally MP   ALP        20172            216 #> 8  Plibersek, Tanya Joan MP   ALP        20172           1722 #> 9                      <NA>  <NA>        20172           4690 #> 10          Wilson, Rick MP    LP        20172           6602 #>                                                                                            content_preview #> 1  by leave—I move:  That standing order 133 (b) (deferred divisions) be suspended for this sitting. I ... #> 2  Honourable members interjecting—  Just hold your horses. Members on my right are not helping this si... #> 3  I move:  That this bill be now read a second time. I'd like to add that Labor is committed to fixing... #> 4  Right now, this country is run in the interests of billionaires and big corporations. While single p... #> 5  My question is to the Prime Minister. Your government has approved over 30 new coal and gas projects... #> 6  What absolute nonsense from the member for Melbourne, the leader of a political party that stopped c... #> 7  My question is to the Minister for Climate Change and Energy. How has the Albanese Labor government ... #> 8  I thank the member for her question. The number of coal mines or extensions approved is 10. Four hav... #> 9  Mr Hamilton interjecting—  The DEPUTY SPEAKER: Member for Groom, do you want to join in the Speaker'... #> 10 I move, as an amendment to the amendment moved by the member for Fairfax:  That all words after 'whi...  # Example of other search terms you might use search_terms <- c(\"economy\", \"health\", \"education\", \"budget\") for (term in search_terms) {   count_query <- paste0(\"     SELECT COUNT(*) as count      FROM speeches      WHERE LOWER(content) LIKE '%\", tolower(term), \"%'   \")      result <- DBI::dbGetQuery(con, count_query)   if (result$count > 0) {     cat(\"Found\", result$count, \"mentions of '\", term, \"'\\n\")   } } #> Found 61 mentions of ' economy ' #> Found 106 mentions of ' health ' #> Found 74 mentions of ' education ' #> Found 102 mentions of ' budget '"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"alternative-database-friendly-search-pattern","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data > Step 7: Text Search and Analysis","what":"Alternative Database-Friendly Search Pattern","title":"Complete Hansard Data Processing Workflow","text":"better performance large databases, can also use pattern:","code":"# More efficient search for large databases # Search with LIMIT in SQL rather than collecting all results climate_search <- DBI::dbGetQuery(con, \"   SELECT      m.full_name,     m.party,      s.session_date,     sp.content_length   FROM speeches sp   LEFT JOIN members m ON sp.member_id = m.member_id     LEFT JOIN sessions s ON sp.session_id = s.session_id   WHERE sp.content LIKE '%climate%'   ORDER BY s.session_date DESC   LIMIT 10 \")  if (nrow(climate_search) > 0) {   cat(\"Climate mentions using direct SQL:\\n\")   print(climate_search) } else {   cat(\"No climate mentions found\\n\") } #> Climate mentions using direct SQL: #>                   full_name party session_date content_length #> 1                      <NA>  <NA>        20172           1625 #> 2                      <NA>  <NA>        20172           6516 #> 3                      <NA>  <NA>        20172          12979 #> 4                      <NA>  <NA>        20172           1482 #> 5       Bandt, Adam Paul MP    AG        20172            523 #> 6      Albanese, Anthony MP   ALP        20172           2308 #> 7           Sitou, Sally MP   ALP        20172            216 #> 8  Plibersek, Tanya Joan MP   ALP        20172           1722 #> 9                      <NA>  <NA>        20172           4690 #> 10          Wilson, Rick MP    LP        20172           6602"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"topic-based-analysis","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data > Step 7: Text Search and Analysis","what":"Topic-Based Analysis","title":"Complete Hansard Data Processing Workflow","text":"","code":"# Questions vs Answers by party qa_balance <- tbls$speeches |>   left_join(tbls$members, by = \"member_id\") |>   group_by(party) |>   summarise(     questions = sum(is_question, na.rm = TRUE),     answers = sum(is_answer, na.rm = TRUE),     question_answer_ratio = round(       sum(is_question, na.rm = TRUE) / pmax(sum(is_answer, na.rm = TRUE), 1), 2     ),     .groups = \"drop\"   ) |>   filter(questions + answers >= 10) |>   arrange(desc(question_answer_ratio)) |>   collect() #> Warning: Missing values are always removed in SQL aggregation functions. #> Use `na.rm = TRUE` to silence this warning #> This warning is displayed once every 8 hours.  print(qa_balance) #> # A tibble: 0 × 4 #> # ℹ 4 variables: party <chr>, questions <lgl>, answers <lgl>, #> #   question_answer_ratio <lgl>"},{"path":[]},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"export-to-csv-for-r-analysis","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data > Step 8: Data Export for External Analysis","what":"Export to CSV for R Analysis","title":"Complete Hansard Data Processing Workflow","text":"","code":"# Export member statistics member_stats <- get_top_speakers(con, limit = 100) write.csv(member_stats, \"member_activity_stats.csv\", row.names = FALSE)  # Export session summary session_summary <- tbls$sessions |>   left_join(     tbls$speeches |>        group_by(session_id) |>        summarise(         speech_count = n(),         question_count = sum(is_question, na.rm = TRUE),         avg_speech_length = round(mean(content_length, na.rm = TRUE), 1),         .groups = \"drop\"       ),     by = \"session_id\"   ) |>   collect()  write.csv(session_summary, \"session_summary.csv\", row.names = FALSE)  cat(\"Data exported to CSV files for external analysis\\n\") #> Data exported to CSV files for external analysis"},{"path":[]},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"check-import-status","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data > Step 9: Database Maintenance","what":"Check Import Status","title":"Complete Hansard Data Processing Workflow","text":"","code":"# Check for any failed imports if (exists(\"combined_results\")) {   failed_imports <- combined_results[!combined_results$success, ]      if (nrow(failed_imports) > 0) {     cat(\"Files that failed to import:\\n\")     print(failed_imports[c(\"filename\", \"processed_at\")])          # Retry failed imports     cat(\"\\nRetrying failed imports...\\n\")     retry_results <- import_hansard_batch(       failed_imports$file_path,        con,        validate = TRUE,       force_reimport = TRUE     )     print(retry_results)   } else {     cat(\"All files imported successfully!\\n\")   } } #> Files that failed to import: #> # A tibble: 5 × 2 #>   filename                  processed_at        #>   <chr>                     <dttm>              #> 1 2024-02-08_edit_step7.csv 2025-08-05 23:44:05 #> 2 2024-05-14_edit_step7.csv 2025-08-05 23:44:05 #> 3 2024-11-21_edit_step7.csv 2025-08-05 23:44:05 #> 4 2025-02-06_edit_step7.csv 2025-08-05 23:44:05 #> 5 2025-03-25_edit_step7.csv 2025-08-05 23:44:05 #>  #> Retrying failed imports... #> Processing: 2024-02-08_edit_step7.csv #>   v Successfully imported 243 records #> Processing: 2024-05-14_edit_step7.csv #>   v Successfully imported 191 records #> Processing: 2024-11-21_edit_step7.csv #>   v Successfully imported 166 records #> Processing: 2025-02-06_edit_step7.csv #>   v Successfully imported 182 records #> Processing: 2025-03-25_edit_step7.csv #>   v Successfully imported 189 records #>  #> === Import Summary === #> Successful: 5/5 (100%) #> # A tibble: 5 × 4 #>   file_path                                 filename success processed_at        #>   <chr>                                     <chr>    <lgl>   <dttm>              #> 1 /home/runner/work/_temp/Library/hansardR… 2024-02… TRUE    2025-08-05 23:44:08 #> 2 /home/runner/work/_temp/Library/hansardR… 2024-05… TRUE    2025-08-05 23:44:08 #> 3 /home/runner/work/_temp/Library/hansardR… 2024-11… TRUE    2025-08-05 23:44:08 #> 4 /home/runner/work/_temp/Library/hansardR… 2025-02… TRUE    2025-08-05 23:44:08 #> 5 /home/runner/work/_temp/Library/hansardR… 2025-03… TRUE    2025-08-05 23:44:08"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"database-optimization","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data > Step 9: Database Maintenance","what":"Database Optimization","title":"Complete Hansard Data Processing Workflow","text":"","code":"# Get database file size if (file.exists(db_path)) {   db_size_mb <- round(file.size(db_path) / 1024^2, 1)   cat(\"Database size:\", db_size_mb, \"MB\\n\") } #> Database size: 2.2 MB  # Optimize database (SQLite maintenance) DBI::dbExecute(con, \"VACUUM;\") #> [1] 0 DBI::dbExecute(con, \"ANALYZE;\") #> [1] 0  cat(\"Database optimized\\n\") #> Database optimized"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"cleanup","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data","what":"Cleanup","title":"Complete Hansard Data Processing Workflow","text":"","code":"# Close database connection when finished dbDisconnect(con) cat(\"Database connection closed\\n\") #> Database connection closed"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"next-steps","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data","what":"Next Steps","title":"Complete Hansard Data Processing Workflow","text":"Hansard data now structured database, can: Conduct longitudinal analysis parliamentary discourse Perform text mining sentiment analysis speech content Analyse party dynamics question-answer patterns Study member behaviour across different topics time periods Export data use text analysis tools","code":""},{"path":[]},{"path":"https://australian-parliamentary-speech.github.io/hansardR/articles/hansard-workflow.html","id":"common-issues","dir":"Articles","previous_headings":"Processing Australian Parliamentary Hansard Data > Troubleshooting","what":"Common Issues","title":"Complete Hansard Data Processing Workflow","text":"File validation failures: - Check file encoding (UTF-8) - Verify column names match expected schema - Ensure date format filename YYYY-MM-DD Import errors: - Use force_reimport = TRUE overwrite existing sessions - Check database permissions disk space - Validate file structure import Memory issues large datasets: - Process years individually rather - Use progress = FALSE reduce overhead - Close reconnect database periodically long imports Query performance: - Database includes optimized indexes common queries - Use collect() need data R - Filter early dplyr chains reduce data transfer additional help, see package documentation: help(package = \"hansardR\")","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kenneth Benoit. Maintainer, author.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Benoit K (2025). hansardR: Process Australian Parliamentary Hansard Data gazillion csv files. R package version 0.1.0, https://australian-parliamentary-speech.github.io/hansardR/.","code":"@Manual{,   title = {hansardR: Process Australian Parliamentary Hansard Data from a gazillion csv files},   author = {Kenneth Benoit},   year = {2025},   note = {R package version 0.1.0},   url = {https://australian-parliamentary-speech.github.io/hansardR/}, }"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"hansardr","dir":"","previous_headings":"","what":"Process Australian Parliamentary Hansard Data from a gazillion csv files","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"comprehensive R toolkit processing, validating, analysing Australian Parliamentary Hansard CSV data. Designed computational social science research robust data handling, validation, structured database storage.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"🗃️ Database Creation: Structured SQLite storage optimised indexes ✅ File Validation: Comprehensive CSV structure integrity checking 📊 Batch Processing: Efficient import large datasets progress tracking 🔍 Advanced Querying: dplyr-compatible database interface analysis 📈 Built-Analytics: Speaker statistics, temporal analysis, content metrics 🛠️ Modular Design: Separate validation, processing, analysis workflows 📚 Rich Documentation: Comprehensive vignettes examples","code":""},{"path":[]},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"development-version-recommended","dir":"","previous_headings":"Installation","what":"Development Version (Recommended)","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"Install latest development version GitHub:","code":"pak::pak(\"Australian-Parliamentary-Speech/hansardR\")"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"system-requirements","dir":"","previous_headings":"Installation","what":"System Requirements","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"R Version: Requires R ≥ 4.1.0 (native pipe operator |>) Dependencies: package automatically install required dependencies: - DBI, RSQLite - Database interface - dplyr, readr, purrr, stringr, tibble - Data manipulation - progress (optional) - Progress bars batch operations","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"","code":"library(hansardR)  # Create database con <- create_hansard_database(\"hansard.db\")  # Import single file import_hansard_file(\"2025-02-04_edit_step7.csv\", con)  # Get table references for analysis tbls <- get_hansard_tables(con)  # Analyse with dplyr top_speakers <- tbls$speeches |>   left_join(tbls$members, by = \"member_id\") |>   count(full_name, party, sort = TRUE) |>   collect()  print(top_speakers)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"sample-data","dir":"","previous_headings":"","what":"Sample Data","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"package includes sample data testing learning:","code":"# Explore included sample data hansard_sample_info()  # Use sample data in examples sample_path <- hansard_sample_data() con <- create_hansard_database(tempfile(fileext = \".db\")) import_hansard_year(file.path(sample_path, \"sample_2025\"), con)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"comprehensive-workflow","dir":"","previous_headings":"","what":"Comprehensive Workflow","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"detailed usage instructions, see complete workflow vignette:","code":"# View the comprehensive workflow guide vignette(\"hansard-workflow\", package = \"hansardR\")  # Or browse online browseVignettes(\"hansardR\")"},{"path":[]},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"data-structure","dir":"","previous_headings":"","what":"Data Structure","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"package creates normalised database schema: sessions: Parliamentary sitting days members: MPs party affiliations electorates debates: Major topics discussed session speeches: Individual contributions, questions, answers, interjections","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"database-schema","dir":"","previous_headings":"Data Structure","what":"Database Schema","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"package creates normalised relational database optimised parliamentary data analysis:","code":"erDiagram     SESSIONS {         int session_id PK         date session_date UK         int year         int chamber_type         text source_file         datetime created_at     }      MEMBERS {         int member_id PK         text name_id UK         text full_name         text electorate         text party         text role         date first_seen_date         date last_seen_date         datetime created_at     }      DEBATES {         int debate_id PK         int session_id FK         text debate_title         int debate_order         datetime created_at     }      SPEECHES {         int speech_id PK         int session_id FK         int debate_id FK         int member_id FK         int speaker_no         time speech_time         real page_no         text content         text subdebate_info         text xml_path         bool is_question         bool is_answer         bool is_interjection         bool is_speech         bool is_stage_direction         int content_length         datetime created_at     }      SESSIONS ||--o{ DEBATES : \"has\"     SESSIONS ||--o{ SPEECHES : \"contains\"     MEMBERS ||--o{ SPEECHES : \"gives\"     DEBATES ||--o{ SPEECHES : \"includes\""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"data-processing-workflow","dir":"","previous_headings":"Data Structure","what":"Data processing workflow","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"","code":"flowchart TD      A[CSV Files<br/>2025-02-04_edit_step7.csv] --> B{File Validation}     B -->|Valid| C[Load & Clean Data]     B -->|Invalid| D[Report Issues]      C --> E[Extract Session Info<br/>Date, Chamber, Source]     C --> F[Extract Members<br/>Name, Party, Electorate]     C --> G[Extract Debates<br/>Topics, Order]     C --> H[Extract Speeches<br/>Content, Flags, Metadata]      E --> I[(Sessions Table)]     F --> J[(Members Table)]     G --> K[(Debates Table)]     H --> L[(Speeches Table)]      I --> M[Analysis Ready Database]     J --> M     K --> M     L --> M      M --> N[dplyr Queries]     M --> O[SQL Queries]     M --> P[Text Mining]      N --> Q[Speaker Statistics]     O --> R[Temporal Analysis]     P --> S[Content Analysis]      style A fill:#e1f5fe     style M fill:#f3e5f5     style Q fill:#e8f5e8     style R fill:#e8f5e8     style S fill:#e8f5e8"},{"path":[]},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"speaker-activity-analysis","dir":"","previous_headings":"Example Analyses","what":"Speaker Activity Analysis","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"","code":"# Most active speakers top_speakers <- get_top_speakers(con, limit = 10)  # Questions by party over time party_questions <- tbls$speeches |>   filter(is_question == 1) |>   left_join(tbls$members, by = \"member_id\") |>   left_join(tbls$sessions, by = \"session_id\") |>   count(party, year, sort = TRUE) |>   collect()"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"content-analysis","dir":"","previous_headings":"Example Analyses","what":"Content Analysis","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"","code":"# Average speech length by party speech_patterns <- tbls$speeches |>   left_join(tbls$members, by = \"member_id\") |>   group_by(party) |>   summarise(     avg_length = mean(content_length, na.rm = TRUE),     total_speeches = n(),     questions = sum(is_question, na.rm = TRUE)   ) |>   collect()"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"temporal-trends","dir":"","previous_headings":"Example Analyses","what":"Temporal Trends","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"","code":"# Parliamentary activity over time monthly_activity <- tbls$speeches |>   left_join(tbls$sessions, by = \"session_id\") |>   mutate(month = substr(session_date, 1, 7)) |>   count(month, sort = TRUE) |>   collect()"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"file-format","dir":"","previous_headings":"","what":"File Format","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"package expects CSV files Australian Parliamentary Hansard structure: Filename format: YYYY-MM-DD_edit_step7.csv Required columns: question_flag, answer_flag, speech_flag, name, name.id, party, content, etc. Encoding: UTF-8","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"performance","dir":"","previous_headings":"","what":"Performance","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"Designed large-scale parliamentary data: ✅ Handles 100+ years parliamentary data (1901-2025) ✅ Efficient batch processing transaction management ✅ Optimised database indexes common queries ✅ Memory-efficient streaming large files ✅ Progress tracking long-running operations","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"welcome contributions! Please see Contributing Guidelines details.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"development-setup","dir":"","previous_headings":"Contributing","what":"Development Setup","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"","code":"# Clone the repository git clone https://github.com/Australian-Parliamentary-Speech/hansardR.git cd hansardR  # Install development dependencies devtools::install_dev_deps()  # Run tests devtools::test()  # Check package devtools::check()"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"use hansardR research, please cite:","code":"Benoit, Kenneth (2025). hansardR: Processing Australian Parliamentary Hansard Data.  R package version 0.1.0. https://github.com/Australian-Parliamentary-Speech/hansardR"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"related-projects","dir":"","previous_headings":"","what":"Related Projects","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"Australian Parliamentary Speech Project - Broader research initiative ParlSpeech - Comparative parliamentary speech data quanteda - Text analysis framework","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"GPL (>= 3) - see LICENSE file details.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/index.html","id":"support","dir":"","previous_headings":"","what":"Support","title":"Process Australian Parliamentary Hansard Data from a gazillion csv files","text":"📖 Package Documentation 🐛 Report Issues 💬 Discussions 📧 Contact: kbenoit@smu.edu.sg Developed Australian Parliamentary Speech Project","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/clean_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Data Values — clean_value","title":"Clean Data Values — clean_value","text":"Clean Data Values","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/clean_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Data Values — clean_value","text":"","code":"clean_value(x)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/clean_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Data Values — clean_value","text":"x Vector clean","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/clean_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Data Values — clean_value","text":"Cleaned vector","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/connect_hansard_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to Hansard Database — connect_hansard_database","title":"Connect to Hansard Database — connect_hansard_database","text":"Connect Hansard Database","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/connect_hansard_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to Hansard Database — connect_hansard_database","text":"","code":"connect_hansard_database(db_path)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/connect_hansard_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to Hansard Database — connect_hansard_database","text":"db_path Path database file","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/connect_hansard_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to Hansard Database — connect_hansard_database","text":"DBI connection object","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/create_hansard_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Hansard Database — create_hansard_database","title":"Create Hansard Database — create_hansard_database","text":"Creates new SQLite database standard Hansard schema","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/create_hansard_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Hansard Database — create_hansard_database","text":"","code":"create_hansard_database(db_path, overwrite = FALSE)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/create_hansard_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Hansard Database — create_hansard_database","text":"db_path Path database file overwrite existing database overwritten?","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/create_hansard_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Hansard Database — create_hansard_database","text":"DBI connection object","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/create_standard_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Standard Schema — create_standard_schema","title":"Create Standard Schema — create_standard_schema","text":"Create Standard Schema","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/create_standard_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Standard Schema — create_standard_schema","text":"","code":"create_standard_schema(con)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/create_standard_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Standard Schema — create_standard_schema","text":"con Database connection","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/get_database_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Database Statistics — get_database_stats","title":"Get Database Statistics — get_database_stats","text":"Get Database Statistics","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/get_database_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Database Statistics — get_database_stats","text":"","code":"get_database_stats(con)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/get_database_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Database Statistics — get_database_stats","text":"con Database connection","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/get_database_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Database Statistics — get_database_stats","text":"List database statistics","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/get_hansard_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Database Table References — get_hansard_tables","title":"Get Database Table References — get_hansard_tables","text":"Returns dplyr table references easy querying","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/get_hansard_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Database Table References — get_hansard_tables","text":"","code":"get_hansard_tables(con)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/get_hansard_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Database Table References — get_hansard_tables","text":"con Database connection","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/get_hansard_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Database Table References — get_hansard_tables","text":"List table references","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/get_top_speakers.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Top Speakers — get_top_speakers","title":"Get Top Speakers — get_top_speakers","text":"Get Top Speakers","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/get_top_speakers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Top Speakers — get_top_speakers","text":"","code":"get_top_speakers(con, limit = 10)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/get_top_speakers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Top Speakers — get_top_speakers","text":"con Database connection limit Number speakers return","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/get_top_speakers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Top Speakers — get_top_speakers","text":"Data frame speaker statistics","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/hansard_sample_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Path to Sample Hansard Data — hansard_sample_data","title":"Get Path to Sample Hansard Data — hansard_sample_data","text":"Returns path sample Hansard CSV files included package testing demonstration purposes.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/hansard_sample_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Path to Sample Hansard Data — hansard_sample_data","text":"","code":"hansard_sample_data(year = NULL)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/hansard_sample_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Path to Sample Hansard Data — hansard_sample_data","text":"year Character vector years get (e.g., \"2024\", \"2025\"). NULL, returns base houseCSV directory.","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/hansard_sample_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Path to Sample Hansard Data — hansard_sample_data","text":"Character vector paths sample data directories","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/hansard_sample_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Path to Sample Hansard Data — hansard_sample_data","text":"","code":"# Get all sample data directory sample_path <- hansard_sample_data()  # Get specific years sample_2024 <- hansard_sample_data(\"2024\") sample_files <- list.files(sample_2024, pattern = \"*.csv\", full.names = TRUE)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/hansard_sample_info.html","id":null,"dir":"Reference","previous_headings":"","what":"List Available Sample Data — hansard_sample_info","title":"List Available Sample Data — hansard_sample_info","text":"List Available Sample Data","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/hansard_sample_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Available Sample Data — hansard_sample_info","text":"","code":"hansard_sample_info()"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/hansard_sample_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Available Sample Data — hansard_sample_info","text":"Data frame information available sample files","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/hansard_sample_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Available Sample Data — hansard_sample_info","text":"","code":"# See what sample data is available hansard_sample_info() #> # A tibble: 2 × 4 #>   year  files total_size_kb sample_files                                         #>   <chr> <int>         <dbl> <chr>                                                #> 1 2024      3         1167. 2024-02-08_edit_step7.csv, 2024-05-14_edit_step7.cs… #> 2 2025      2          884  2025-02-06_edit_step7.csv, 2025-03-25_edit_step7.csv"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/import_hansard_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Multiple Files — import_hansard_batch","title":"Import Multiple Files — import_hansard_batch","text":"Import Multiple Files","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/import_hansard_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Multiple Files — import_hansard_batch","text":"","code":"import_hansard_batch(   file_paths,   con,   validate = TRUE,   force_reimport = FALSE,   progress = TRUE )"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/import_hansard_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Multiple Files — import_hansard_batch","text":"file_paths Vector file paths con Database connection validate files validated? force_reimport existing sessions overwritten? progress Show progress bar?","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/import_hansard_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Multiple Files — import_hansard_batch","text":"Summary import results","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/import_hansard_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Single CSV File to Database — import_hansard_file","title":"Import Single CSV File to Database — import_hansard_file","text":"Complete pipeline: validate, load, process, import single CSV file","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/import_hansard_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Single CSV File to Database — import_hansard_file","text":"","code":"import_hansard_file(file_path, con, validate = TRUE, force_reimport = FALSE)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/import_hansard_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Single CSV File to Database — import_hansard_file","text":"file_path Path CSV file con Database connection validate file validated first? force_reimport existing session overwritten?","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/import_hansard_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Single CSV File to Database — import_hansard_file","text":"Boolean indicating success","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/import_hansard_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Year Directory — import_hansard_year","title":"Import Year Directory — import_hansard_year","text":"Import Year Directory","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/import_hansard_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Year Directory — import_hansard_year","text":"","code":"import_hansard_year(year_dir, con, pattern = \"*_edit_step7.csv\", ...)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/import_hansard_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Year Directory — import_hansard_year","text":"year_dir Path year directory con Database connection pattern File pattern match ... Additional arguments passed import_hansard_batch","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/import_hansard_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Year Directory — import_hansard_year","text":"Import results","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/import_session_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Session Data — import_session_data","title":"Import Session Data — import_session_data","text":"Internal function handle actual database import","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/import_session_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Session Data — import_session_data","text":"","code":"import_session_data(df, con, force_reimport = FALSE)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/import_session_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Session Data — import_session_data","text":"df Data frame session data con Database connection force_reimport existing session replaced?","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/load_hansard_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and Clean CSV File — load_hansard_csv","title":"Load and Clean CSV File — load_hansard_csv","text":"Loads CSV file applies standard cleaning operations","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/load_hansard_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and Clean CSV File — load_hansard_csv","text":"","code":"load_hansard_csv(file_path, validate = TRUE)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/load_hansard_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load and Clean CSV File — load_hansard_csv","text":"file_path Path CSV file validate file structure validated first?","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/load_hansard_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and Clean CSV File — load_hansard_csv","text":"Cleaned data frame NULL validation fails","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/parse_session_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Session Date from Filename — parse_session_date","title":"Parse Session Date from Filename — parse_session_date","text":"Parse Session Date Filename","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/parse_session_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Session Date from Filename — parse_session_date","text":"","code":"parse_session_date(filename)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/parse_session_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Session Date from Filename — parse_session_date","text":"filename Filename parse","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/parse_session_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Session Date from Filename — parse_session_date","text":"Date object NA","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/parse_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Time Strings — parse_time","title":"Parse Time Strings — parse_time","text":"Parse Time Strings","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/parse_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Time Strings — parse_time","text":"","code":"parse_time(time_str)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/parse_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Time Strings — parse_time","text":"time_str Time string like \"(12:04):\"","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/parse_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Time Strings — parse_time","text":"Cleaned time string NA","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/process_debates.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Debates Data — process_debates","title":"Process Debates Data — process_debates","text":"Process Debates Data","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/process_debates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Debates Data — process_debates","text":"","code":"process_debates(df, con, session_id)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/process_debates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Debates Data — process_debates","text":"df Session data frame con Database connection session_id Session ID","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/process_debates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Debates Data — process_debates","text":"Tibble mapping debateinfo debate_id","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/process_members.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Members Data — process_members","title":"Process Members Data — process_members","text":"Process Members Data","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/process_members.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Members Data — process_members","text":"","code":"process_members(df, con, session_date)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/process_members.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Members Data — process_members","text":"df Session data frame con Database connection session_date Date session","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/process_members.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Members Data — process_members","text":"Tibble mapping name_id member_id","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/process_speeches.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Speeches Data — process_speeches","title":"Process Speeches Data — process_speeches","text":"Process Speeches Data","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/process_speeches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Speeches Data — process_speeches","text":"","code":"process_speeches(df, con, session_id, member_map, debate_map)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/process_speeches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Speeches Data — process_speeches","text":"df Session data frame con Database connection session_id Session ID member_map Member mapping debate_map Debate mapping","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/validate_csv_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Multiple Files — validate_csv_batch","title":"Validate Multiple Files — validate_csv_batch","text":"Validate Multiple Files","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/validate_csv_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Multiple Files — validate_csv_batch","text":"","code":"validate_csv_batch(file_paths)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/validate_csv_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Multiple Files — validate_csv_batch","text":"file_paths Vector file paths","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/validate_csv_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Multiple Files — validate_csv_batch","text":"Data frame validation results","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/validate_csv_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate CSV File Structure — validate_csv_structure","title":"Validate CSV File Structure — validate_csv_structure","text":"Checks CSV file expected structure Hansard data","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/validate_csv_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate CSV File Structure — validate_csv_structure","text":"","code":"validate_csv_structure(file_path, expected_cols = NULL)"},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/validate_csv_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate CSV File Structure — validate_csv_structure","text":"file_path Path CSV file expected_cols Expected column names (NULL standard set)","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/reference/validate_csv_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate CSV File Structure — validate_csv_structure","text":"List validation results","code":""},{"path":"https://australian-parliamentary-speech.github.io/hansardR/news/index.html","id":"aushansardr-010","dir":"Changelog","previous_headings":"","what":"aushansardr 0.1.0","title":"aushansardr 0.1.0","text":"Initial CRAN submission.","code":""}]
